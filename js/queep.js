// Generated by CoffeeScript 2.3.2
(function() {

  /*
  This function checks the EPR/OPR content for duplicate acronyms
  by duplicates we mean using both CDR and CMDR in the same text
  since these mean the same thing, you should be consistent
  */
  /*
  highlights all items in the array passed to it

  TODO: tie together elements from the same array
  */
  var acronym_and_word_check, add_tooltip_custom, add_tooltips, check_single_acronym, duplicate_acronym_check, highlight_dupes, highlight_typos, highlight_valid_acros, highlight_word_acro_pairs, queep, spell_check,
    indexOf = [].indexOf;

  check_single_acronym = function(text_array, acronym_list) {
    var acronym1, acronym2, i, j, len, len1, matches;
    matches = [];
    for (i = 0, len = acronym_list.length; i < len; i++) {
      acronym1 = acronym_list[i];
      for (j = 0, len1 = acronym_list.length; j < len1; j++) {
        acronym2 = acronym_list[j];
        if (indexOf.call(text_array, acronym1) >= 0 && indexOf.call(text_array, acronym2) >= 0 && acronym1 !== acronym2 && indexOf.call(matches, acronym1) < 0) {
          matches.push(acronym1);
          if (matches.length === acronym_list.length) {
            break;
          }
        }
      }
    }
    return matches;
  };

  duplicate_acronym_check = function(text_content) {
    var acronym_list, clean_text, duplicate_acronym_list, duplicate_acronym_list_raw, duplicate_acronyms, i, j, len, len1, new_elem, text_array;
    // get the actual text in the duplicate acronyms text box
    duplicate_acronym_list_raw = $('#duplicate_acronyms').val();
    // lowercase it, we don't care about case for dupes
    // duplicate_acronym_list_raw = duplicate_acronym_list_raw.toLowerCase()

    //get rid of spaces
    duplicate_acronym_list_raw = duplicate_acronym_list_raw.replace(/[ ]/g, "");
    
    // make our text an array split on newlines
    duplicate_acronym_list = duplicate_acronym_list_raw.split("\n");

// split each line on commas (only supports csv right now)
    for (i = 0, len = duplicate_acronym_list.length; i < len; i++) {
      acronym_list = duplicate_acronym_list[i];
      duplicate_acronym_list[duplicate_acronym_list.indexOf(acronym_list)] = acronym_list.split(",");
    }
    clean_text = text_content.replace(/[.,\/()\;:{}!?-]/g, " ");
    // clean_text = clean_text.toLowerCase()
    clean_text = clean_text.replace(/\s+/g, " ");
    text_array = clean_text.split(" ");
    duplicate_acronyms = [];
    for (j = 0, len1 = duplicate_acronym_list.length; j < len1; j++) {
      acronym_list = duplicate_acronym_list[j];
      new_elem = check_single_acronym(text_array, acronym_list);
      if (new_elem) {
        duplicate_acronyms.push(new_elem);
      }
    }
    return duplicate_acronyms;
  };

  highlight_dupes = function(duplicate_acronyms, text_content) {
    var acronym, acronym_list, i, j, len, len1;
    for (i = 0, len = duplicate_acronyms.length; i < len; i++) {
      acronym_list = duplicate_acronyms[i];
      for (j = 0, len1 = acronym_list.length; j < len1; j++) {
        acronym = acronym_list[j];
        text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${acronym}(?=([^a-zA-Z]|$))`, "gi"), '<span class="dupe">' + acronym + '</span>');
      }
    }
    return text_content;
  };

  highlight_typos = function(typos, text_content) {
    var i, len, typo;
    for (i = 0, len = typos.length; i < len; i++) {
      typo = typos[i];
      text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${typo}(?=([^a-zA-Z]|$))`, "gi"), '<span class="typo">' + typo + '</span>');
    }
    return text_content;
  };

  spell_check = function(text_content, dict_array) {
    var clean_text, i, len, ref, text_array, typos, word;
    clean_text = text_content.replace(/[.,\/()\;:{}!?-]/g, " ");
    // clean_text = clean_text.toLowerCase()
    clean_text = clean_text.replace(/\s+/g, " ");
    text_array = clean_text.split(" ");
    typos = [];
    for (i = 0, len = text_array.length; i < len; i++) {
      word = text_array[i];
      if ((ref = word.toLowerCase(), indexOf.call(dict_array, ref) < 0) && indexOf.call(typos, word) < 0) {
        typos.push(word);
      }
    }
    return typos;
  };

  acronym_and_word_check = function(text_content, word_acro_array) {
    var acronym_words, alt_word, i, j, len, len1, lower_case_tokens, ref, text_array, word;
    text_array = text_content.split(" ");
    // console.log clean_text
    acronym_words = [];
    lower_case_tokens = [];
    text_array.forEach(function(ele){
	lower_case_tokens.push(ele.toLowerCase());
	});
    for (i = 0, len = text_array.length; i < len; i++) {
      word = text_array[i];
      word = word.toLowerCase();
      if (word_acro_array[word]) {
        ref = word_acro_array[word];
        
        //See if any of the spelled out versions exists in the input
        for (j = 0, len1 = ref.length; j < len1; j++) {
          alt_word = ref[j];
          if (indexOf.call(lower_case_tokens, alt_word) >= 0 && indexOf.call(acronym_words, [word, word_acro_array[word]]) < 0) {
            acronym_words.push([word, alt_word]);
          }
        }
      }
    }
    return acronym_words;
  };

  highlight_word_acro_pairs = function(text_content, acronym_words) {
    var i, id1, id2, len, pair, word1, word2;
    for (i = 0, len = acronym_words.length; i < len; i++) {
      pair = acronym_words[i];
      word1 = pair[0];
      word2 = pair[1];
      id1 = word1 + word2;
      id2 = word2 + word1;
      if (navigator.userAgent.indexOf('Chrome') === !-1) {
        text_content = text_content.replace(RegExp(`(?<=[ ]|^)${word1}(?=([ ]|$))`, "gi"), '<span id="' + id1 + '" class="acro_pair">$&</span>');
        text_content = text_content.replace(RegExp(`(?<=[ ]|^)${word2}(?=([ ]|$))`, "gi"), '<span id="' + id2 + '" class="acro_pair">$&</span>');
      } else {
        text_content = text_content.replace(RegExp(`[ ]${word1}(?=([ \\<]|$))`, "gi"), '<span id="' + id1 + '" class="acro_pair">$&</span>');
        text_content = text_content.replace(RegExp(`[ ]${word2}(?=([ \\<]|$))`, "gi"), '<span id="' + id2 + '" class="acro_pair">$&</span>');
        text_content = text_content.replace(RegExp(`^${word1}(?=([ \\<]|$))`, "gi"), '<span id="' + id1 + '" class="acro_pair">$&</span>');
        text_content = text_content.replace(RegExp(`^${word2}(?=([ \\<]|$))`, "gi"), '<span id="' + id2 + '" class="acro_pair">$&</span>');
      }
    }
    return text_content;
  };

  add_tooltip_custom = function(selector, msg) {
    tippy(selector, {
      content: msg,
      flip: false
    });
  };

  add_tooltips = function(acronym_words) {
    var i, len, pair;
    for (i = 0, len = acronym_words.length; i < len; i++) {
      pair = acronym_words[i];
      add_tooltip_custom('#' + pair[0] + pair[1], pair[1]);
      add_tooltip_custom('#' + pair[1] + pair[0], pair[0]);
    }
  };

  highlight_valid_acros = function(text_content, word_acro_array) {
    var acronym_array, i, len, ref, text_array, word;
    acronym_array = Object.keys(word_acro_array);
    text_array = text_content.split(" ");
    for (i = 0, len = text_array.length; i < len; i++) {
      word = text_array[i];
      if (ref = word.toLowerCase(), indexOf.call(acronym_array, ref) >= 0) {
        console.log("ST8");
        text_content = text_content.replace(RegExp(`^${word}|[ ]${word}(?=([ ]|$))`, "gi"), '<span id="' + word + '" class="acro_green">$&</span>');
      }
    }
    return text_content;
  };

  queep = function() {
    var acronym_words, text_content;
    text_content = $('#output').html();
    
    // console.log("EPR/OPR text content:" + text_content)
    // approved_acronym_check(text_content)
    // duplicate_acronyms = duplicate_acronym_check(text_content)
    // text_content = highlight_dupes(duplicate_acronyms, text_content)
    acronym_words = acronym_and_word_check(text_content, word_acro_data);
    text_content = highlight_word_acro_pairs(text_content, acronym_words);
    text_content = highlight_valid_acros(text_content, word_acro_data);
    return {
      // typos = spell_check(text_content,dict_array)
      // text_content = highlight_typos(typos,text_content)
      // $('#text_content').focus()
      'html': text_content,
      'acronym_words': acronym_words
    };
  };

  $(function() {
    return $("#input").on("input propertychange paste", function() {
      var result;
      //Adds the text you type in, to the output. 
      $('#output').text($('#input').val());
      result = queep();
      $('#output').html(result['html']);
      add_tooltips(result['acronym_words']);
      add_tooltip_custom(".acro_green", "Approved abbreviation");
    });
  });

}).call(this);
