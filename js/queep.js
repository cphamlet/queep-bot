// Generated by CoffeeScript 2.3.2
(function() {
  /*
  highlights all items in the array passed to it

  TODO: tie together elements from the same array
  */
  var add_tooltip_custom, add_tooltips, double_dash_check, exclamation_check, highlight_dupes, highlight_typos, highlight_valid_acros, highlight_word_acro_pairs, queep, tooltipped_words;

  highlight_dupes = function(duplicate_acronyms, text_content) {
    var acronym, acronym_list, i, j, len, len1;
    for (i = 0, len = duplicate_acronyms.length; i < len; i++) {
      acronym_list = duplicate_acronyms[i];
      for (j = 0, len1 = acronym_list.length; j < len1; j++) {
        acronym = acronym_list[j];
        text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${acronym}(?=([^a-zA-Z]|$))`, "gi"), '<span class="dupe">' + acronym + '</span>');
      }
    }
    return text_content;
  };

  highlight_typos = function(typos, text_content) {
    var i, len, typo;
    for (i = 0, len = typos.length; i < len; i++) {
      typo = typos[i];
      text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${typo}(?=([^a-zA-Z]|$))`, "gi"), '<span class="typo">' + typo + '</span>');
    }
    return text_content;
  };

  
  // This has been changed to a pure regex version,
  // this function will detect multi-words (e.g. Air Force)

  highlight_word_acro_pairs = function(text_content, word_acro_array, tooltipped_words) {
    var acro_flag, acronym, hash_pair1, hash_pair2, i, j, len, len1, ref, ref1, regex_acro, regex_spelled, spelled_word;
    tooltipped_words = [];
    ref = Object.keys(word_acro_array);
    for (i = 0, len = ref.length; i < len; i++) {
      acronym = ref[i];
      regex_acro = RegExp(`(\\b${acronym}(?![a-zA-Z<"=]))`, "gim");
      //Hardcoded case for &, change in future. &amp is html encoding for "&""
      if (acronym === "&amp;") {
        regex_acro = RegExp(`(${acronym})`, "gim");
      }
      //If the acronym is in the text
      if (regex_acro.test(text_content)) {
        //if acronym is present in text, mark present
        acro_flag = true;
        ref1 = word_acro_array[acronym];
        //For every possible interpretation of an acronym. i.e. 
        //Interpretation for "msn" is ["mission", "missions"]
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          spelled_word = ref1[j];
          regex_spelled = RegExp(`(\\b${spelled_word}(?![a-zA-Z<"=]))`, "gim");
          //Passes true if the spelled out word is ALSO in the text_content.
          //This if statement will only be true if both the acronym AND the 
          //spelled out version is in the text. 
          if (regex_spelled.test(text_content)) {
            acro_flag = false;
            //Replace the contents

            //These are hashed because html id's 
            //cannot have invalid characters "/" or spaces
            //Cuts off last two chars, which are equal signs
            hash_pair1 = btoa(acronym + spelled_word);
            hash_pair1 = hash_pair1.slice(0, -2);
            hash_pair2 = btoa(spelled_word + acronym);
            hash_pair2 = hash_pair2.slice(0, -2);
            tooltipped_words[hash_pair1] = spelled_word;
            tooltipped_words[hash_pair2] = acronym;
            text_content = text_content.replace(regex_acro, '<span id="' + hash_pair1 + '" class="acro_pair">$&</span>');
            text_content = text_content.replace(regex_spelled, '<span id="' + hash_pair2 + '" class="acro_pair">$&</span>');
          }
        }
        if (acro_flag) {
          text_content = text_content.replace(regex_acro, '<span id="' + acronym + '" class="acro_green">$&</span>');
        }
      }
    }
    return {
      "html": text_content,
      "tooltipped_words": tooltipped_words
    };
  };

  add_tooltip_custom = function(selector, msg) {
    tippy(selector, {
      content: msg,
      flip: false
    });
  };

  add_tooltips = function(tooltipped_words) {
    var hash, i, len, ref;
    ref = Object.keys(tooltipped_words);
    for (i = 0, len = ref.length; i < len; i++) {
      hash = ref[i];
      add_tooltip_custom('#' + hash, "Inconsistent with: " + tooltipped_words[hash]);
      add_tooltip_custom('#' + hash, "Inconsistent with: " + tooltipped_words[hash]);
    }
  };

  highlight_valid_acros = function(text_content, word_acro_array) {
    var acro, acronym_array, i, len, lower_word, regex, text_array;
    acronym_array = Object.keys(word_acro_array);
    text_array = text_content.split(" ");
    for (i = 0, len = acronym_array.length; i < len; i++) {
      acro = acronym_array[i];
      lower_word = acro.toLowerCase();
      regex = RegExp(`(\\b${acro})(?=([\\n \\!\\-/\\;]|$))`, "gim");
      text_content = text_content.replace(regex, '<span id="' + acro + '" class="acro_green">$&</span>');
    }
    return text_content;
  };

  exclamation_check = function(text_content) {
    var regex_exclam;
    // This regex expression matches with an "!" that is NOT
    //followed by 2 spaces and a non-whitespace character.
    //All "!" characters must be followed by 2 spaces and a 
    //non-whitespace character

    //It will not match a "!" followed by a newline character.
    regex_exclam = /!(?!(  \S)|$)/gm;
    text_content = text_content.replace(regex_exclam, '<span class="invalid_exclamation">$&</span>');
    return text_content;
  };

  double_dash_check = function(text_content) {
    var regex_double_dash_append, regex_double_dash_precede;
    regex_double_dash_append = /--(?=\s)/gm;
    regex_double_dash_precede = /\s--/gm;
    text_content = text_content.replace(regex_double_dash_append, '<span class="invalid_double_dash">$&</span>');
    text_content = text_content.replace(regex_double_dash_precede, '<span class="invalid_double_dash">$&</span>');
    return text_content;
  };

  tooltipped_words = {};

  queep = function() {
    var result, text_content;
    text_content = $('#output').html();
    result = highlight_word_acro_pairs(text_content, word_acro_data, tooltipped_words);
    text_content = result['html'];
    text_content = exclamation_check(text_content);
    text_content = double_dash_check(text_content);
    result['html'] = text_content;
    return result; // returning: {'html': text_content, 'tooltipped_words':[]}
  };

  $(function() {
    return $("#input").on("input propertychange paste", function() {
      var result;
      //Adds the text you type in, to the output. 
      $('#output').text($('#input').val());
      result = queep();
      $('#output').html(result['html']);
      add_tooltips(result['tooltipped_words']);
      add_tooltip_custom(".acro_green", "Approved abbreviation");
      add_tooltip_custom(".invalid_double_dash", "Error: Whitespace next to '--'");
      add_tooltip_custom(".invalid_exclamation", "2 spaces must appear after a '!'");
    });
  });

}).call(this);
