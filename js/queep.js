// Generated by CoffeeScript 2.3.2

/*
This function checks the EPR/OPR content for duplicate acronyms
by duplicates we mean using both CDR and CMDR in the same text
since these mean the same thing, you should be consistent
*/
/*
highlights all items in the array passed to it

TODO: tie together elements from the same array
*/
var acronym_and_word_check, approved_acronym_check, check_single_acronym, duplicate_acronym_check, highlight_dupes, highlight_typos, highlight_word_acro_pairs, queep, spell_check,
  indexOf = [].indexOf;

approved_acronym_check = function(text_content) {
  if (indexOf.call(Object.keys(acronyms_dict), text_content) >= 0) {
    return console.log("yeah");
  } else {
    return console.log("nope");
  }
};

check_single_acronym = function(text_array, acronym_list) {
  var acronym1, acronym2, i, j, len, len1, matches;
  matches = [];
  for (i = 0, len = acronym_list.length; i < len; i++) {
    acronym1 = acronym_list[i];
    for (j = 0, len1 = acronym_list.length; j < len1; j++) {
      acronym2 = acronym_list[j];
      if (indexOf.call(text_array, acronym1) >= 0 && indexOf.call(text_array, acronym2) >= 0 && acronym1 !== acronym2 && indexOf.call(matches, acronym1) < 0) {
        matches.push(acronym1);
        if (matches.length === acronym_list.length) {
          break;
        }
      }
    }
  }
  return matches;
};

duplicate_acronym_check = function(text_content) {
  var acronym_list, clean_text, duplicate_acronym_list, duplicate_acronym_list_raw, duplicate_acronyms, i, j, len, len1, new_elem, text_array;
  // get the actual text in the duplicate acronyms text box
  duplicate_acronym_list_raw = $('#duplicate_acronyms').val();
  // lowercase it, we don't care about case for dupes
  // duplicate_acronym_list_raw = duplicate_acronym_list_raw.toLowerCase()

  //get rid of spaces
  duplicate_acronym_list_raw = duplicate_acronym_list_raw.replace(/[ ]/g, "");
  
  // make our text an array split on newlines
  duplicate_acronym_list = duplicate_acronym_list_raw.split("\n");

// split each line on commas (only supports csv right now)
  for (i = 0, len = duplicate_acronym_list.length; i < len; i++) {
    acronym_list = duplicate_acronym_list[i];
    duplicate_acronym_list[duplicate_acronym_list.indexOf(acronym_list)] = acronym_list.split(",");
  }
  clean_text = text_content.replace(/[.,\/()\;:{}!?-]/g, " ");
  // clean_text = clean_text.toLowerCase()
  clean_text = clean_text.replace(/\s+/g, " ");
  text_array = clean_text.split(" ");
  duplicate_acronyms = [];
  for (j = 0, len1 = duplicate_acronym_list.length; j < len1; j++) {
    acronym_list = duplicate_acronym_list[j];
    new_elem = check_single_acronym(text_array, acronym_list);
    if (new_elem) {
      duplicate_acronyms.push(new_elem);
    }
  }
  return duplicate_acronyms;
};

highlight_dupes = function(duplicate_acronyms, text_content) {
  var acronym, acronym_list, i, j, len, len1;
  for (i = 0, len = duplicate_acronyms.length; i < len; i++) {
    acronym_list = duplicate_acronyms[i];
    for (j = 0, len1 = acronym_list.length; j < len1; j++) {
      acronym = acronym_list[j];
      text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${acronym}(?=([^a-zA-Z]|$))`, "gi"), '<span class="dupe">' + acronym + '</span>');
    }
  }
  return text_content;
};

highlight_typos = function(typos, text_content) {
  var i, len, typo;
  for (i = 0, len = typos.length; i < len; i++) {
    typo = typos[i];
    text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${typo}(?=([^a-zA-Z]|$))`, "gi"), '<span class="typo">' + typo + '</span>');
  }
  return text_content;
};

spell_check = function(text_content, dict_array) {
  var clean_text, i, len, ref, text_array, typos, word;
  clean_text = text_content.replace(/[.,\/()\;:{}!?-]/g, " ");
  // clean_text = clean_text.toLowerCase()
  clean_text = clean_text.replace(/\s+/g, " ");
  text_array = clean_text.split(" ");
  typos = [];
  for (i = 0, len = text_array.length; i < len; i++) {
    word = text_array[i];
    if ((ref = word.toLowerCase(), indexOf.call(dict_array, ref) < 0) && indexOf.call(typos, word) < 0) {
      typos.push(word);
    }
  }
  return typos;
};

acronym_and_word_check = function(text_content, word_acro_array) {
  var acronym_words, clean_text, i, len, lower_case_tokens, ref, text_array, word;
  clean_text = text_content.replace(/[.,\/()\;:{}!?-]/g, " ");
  clean_text = clean_text.replace(/\s+/g, " ");
  text_array = clean_text.split(" ");
  acronym_words = [];
  console.log("TEXTARRAY");
  console.log(text_array);
  lower_case_tokens = [];
  text_array.forEach(function(ele){
	lower_case_tokens.push(ele.toLowerCase());
	});
  for (i = 0, len = text_array.length; i < len; i++) {
    word = text_array[i];
    word = word.toLowerCase();
    if (word_acro_array[word] && (ref = word_acro_array[word], indexOf.call(lower_case_tokens, ref) >= 0) && indexOf.call(acronym_words, [word, word_acro_array[word]]) < 0) {
      console.log("WORD");
      console.log([word, word_acro_array[word]]);
      acronym_words.push([word, word_acro_array[word]]);
    }
  }
  return acronym_words;
};

highlight_word_acro_pairs = function(text_content, acronym_words) {
  var i, len, pair, word1, word2;
  console.log(text_content);
  for (i = 0, len = acronym_words.length; i < len; i++) {
    pair = acronym_words[i];
    word1 = pair[0];
    word2 = pair[1];
    text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${word1}(?=([^a-zA-Z]|$))`, "gi"), '<span class="acro_pair">$&</span>');
    text_content = text_content.replace(RegExp(`(?<=[^a-zA-Z]|^)${word2}(?=([^a-zA-Z]|$))`, "gi"), '<span class="acro_pair">$&</span>');
  }
  console.log(text_content);
  return text_content;
};

queep = function() {
  var acronym_words, text_content;
  text_content = $('#input').val();
  // console.log("EPR/OPR text content:" + text_content)
  // approved_acronym_check(text_content)
  // duplicate_acronyms = duplicate_acronym_check(text_content)
  // text_content = highlight_dupes(duplicate_acronyms, text_content)
  acronym_words = acronym_and_word_check(text_content, word_acro_data);
  text_content = highlight_word_acro_pairs(text_content, acronym_words);
  // typos = spell_check(text_content,dict_array)
  // text_content = highlight_typos(typos,text_content)
  // $('#text_content').focus()
  return text_content;
};

$(function() {
  return $("#input").on("input propertychange paste", function() {
    var result;
    //Adds the text you type in, to the output. 
    result = queep();
    $('#output').html(result);
  });
});
