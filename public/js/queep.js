// Generated by CoffeeScript 2.3.2
(function() {
    // This has been changed to a pure regex version,
  // this function will detect multi-words (e.g. Air Force)

  var add_tooltip_custom, add_tooltips, custom_encoder, double_dash_check, exclamation_check, highlight_valid_acros, highlight_word_acro_pairs, queep, semi_colon_space_check;

  highlight_word_acro_pairs = function(text_content, word_acro_array) {
    var acro_flag, acro_id, acronym, approved_acros, hash_pair1, hash_pair2, i, j, len, len1, ref, ref1, regex_acro, regex_spelled, spelled_word, tooltipped_words;
    tooltipped_words = [];
    approved_acros = [];
    ref = Object.keys(word_acro_array);
    for (i = 0, len = ref.length; i < len; i++) {
      acronym = ref[i];
      regex_acro = RegExp('(\\b' + acronym + '(?![a-zA-Z<;"=\\\']))', "gim");
      if (acronym === "&amp;") {
        regex_acro = RegExp('(' + acronym + ')', "gim");
      }
      if (regex_acro.test(text_content)) {
        //if acronym is present in text, mark present
        acro_flag = true;
        ref1 = word_acro_array[acronym];
        //For every possible interpretation of an acronym. i.e. 
        //Interpretation for "msn" is ["mission", "missions"]
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          spelled_word = ref1[j];
          regex_spelled = RegExp('(\\b' + spelled_word + '(?![a-zA-Z<;"=\\\']))', "gim");
          if (regex_spelled.test(text_content)) {
            acro_flag = false;
            //Replace the contents
            //These are hashed because html id's 
            //cannot have invalid characters "/" or spaces
            //Cuts off last two chars, which are equal signs
            hash_pair1 = btoa(acronym + spelled_word);
            hash_pair1 = hash_pair1.slice(0, -2);
            hash_pair2 = btoa(spelled_word + acronym);
            hash_pair2 = hash_pair2.slice(0, -2);
            tooltipped_words[hash_pair1] = spelled_word;
            tooltipped_words[hash_pair2] = acronym;
            text_content = text_content.replace(regex_acro, '<span id="' + hash_pair1 + '" class="acro_pair">$&</span>');
            text_content = text_content.replace(regex_spelled, '<span id="' + hash_pair2 + '" class="acro_pair">$&</span>');
          }
        }
        if (acro_flag) {
          acro_id = btoa(acronym).slice(0, -2);
          text_content = text_content.replace(regex_acro, '<span id="' + acro_id + '" class="approved_acro">$&</span>');
          approved_acros[acro_id] = acronym;
        }
      }
    }
    return {
      "html": text_content,
      "tooltipped_words": tooltipped_words,
      "approved_acros": approved_acros
    };
  };

  add_tooltip_custom = function(selector, msg) {
    tippy(selector, {
      content: msg,
      flip: false
    });
  };

  add_tooltips = function(tooltipped_words) {
    var hash, i, len, ref;
    ref = Object.keys(tooltipped_words);
    for (i = 0, len = ref.length; i < len; i++) {
      hash = ref[i];
      add_tooltip_custom('#' + hash, "Inconsistent with: " + tooltipped_words[hash]);
    }
  };

  highlight_valid_acros = function(text_content, word_acro_array) {
    var acro, acronym_array, i, len, lower_word, regex, text_array;
    acronym_array = Object.keys(word_acro_array);
    text_array = text_content.split(' ');
    for (i = 0, len = acronym_array.length; i < len; i++) {
      acro = acronym_array[i];
      lower_word = acro.toLowerCase();
      regex = RegExp('(\\b' + acro + ')(?=([\\n \\!\\-/\\;]|$))', "gim");
      text_content = text_content.replace(regex, '<span id="' + acro + '" class="approved_acro">$&</span>');
    }
    return text_content;
  };

  exclamation_check = function(text_content) {
    var regex_exclam;
    // This regex expression matches with an "!" that is NOT
    //followed by 2 spaces and a non-whitespace character.
    //All "!" characters must be followed by 2 spaces and a 
    //non-whitespace character

    //It will not match a "!" followed by a newline character.
    regex_exclam = /!(?!(  \S)| {0,}$)/gm;
    text_content = text_content.replace(regex_exclam, '<span class="invalid_exclamation">$&</span>');
    return text_content;
  };

  double_dash_check = function(text_content) {
    var regex_double_dash_append, regex_double_dash_precede;
    regex_double_dash_append = /--(?=\s)/gm;
    regex_double_dash_precede = /\s--/gm;
    text_content = text_content.replace(regex_double_dash_append, '<span class="invalid_double_dash">$&</span>');
    text_content = text_content.replace(regex_double_dash_precede, '<span class="invalid_double_dash">$&</span>');
    return text_content;
  };

  //Semi-colon must have exactly 1 space after it
  semi_colon_space_check = function(text_content) {
    var regex_exclam;
    regex_exclam = /;(?!( \S)| {0,}$|<)/gm;
    text_content = text_content.replace(regex_exclam, '<span class="invalid_semi_colon">$&</span>');
    return text_content;
  };

  queep = function() {
    var esc, result, text_content;
    text_content = he.escape($('#output').text());
    result = highlight_word_acro_pairs(text_content, word_acro_data);
    text_content = result['html'];
    text_content = exclamation_check(text_content);
    text_content = double_dash_check(text_content);
    esc = RegExp('&[a-z]{2,4};(?!<)', "gim");
    text_content = text_content.replace(esc, '<span class="html_entity">$&</span>');
    text_content = semi_colon_space_check(text_content);
    result['html'] = text_content;
    return result; // returning: {'html': text_content, 'tooltipped_words':[], 'approved_acros':[]}
  };

  $(function() {
    return $("#input-text").on("input propertychange paste", function() {
      var acro_elem, approved_acros, i, len, ref, result;
      //Adds the text you type in, to the output. 
      $('#output').text($('#input-text').val());
      result = queep();
      $('#output').html(result['html']);
      add_tooltips(result['tooltipped_words']);
      approved_acros = result['approved_acros'];
      ref = Object.keys(approved_acros);
      //For every approved acronym, reveal the spelled word in the UI
      for (i = 0, len = ref.length; i < len; i++) {
        acro_elem = ref[i];
        add_tooltip_custom("#" + acro_elem, "Abbreviates to: " + word_acro_data[approved_acros[acro_elem]][0]);
      }
      add_tooltip_custom(".invalid_double_dash", "Error: Whitespace next to '--'");
      add_tooltip_custom(".invalid_exclamation", "A '!' must have exactly 2 spaces after it");
      add_tooltip_custom(".invalid_semi_colon", "A ';' must have exactly 1 space after it");
    });
  });

  custom_encoder = function(text_content) {
    var enc, special_chars;
    special_chars = ['<', '>', '&', '\''];
    return enc = RegExp('(\\b' + acronym + '(?![a-zA-Z<;"=\\\']))', "gim");
  };

}).call(this);
